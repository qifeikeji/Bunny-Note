name: Build and Package

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build
          sudo apt-get install -y libgl1-mesa-dev
          sudo apt-get install -y zip
          sudo apt-get install -y python3-pip
          sudo apt-get install -y libfontconfig1-dev libfreetype6-dev libx11-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev libxcb-glx0-dev libxcb-keysyms1-dev libxcb-image0-dev libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev libxcb-randr0-dev libxcb-render-util0-dev libxcb-xinerama0-dev libxcb-xkb-dev libxcb-xrm-dev libxcb-util-dev libxcb-xinput-dev libxcb-xtest0-dev
          sudo apt-get install -y libxkbcommon-dev libvulkan-dev libcmark-dev
          sudo apt-get install -y patchelf

      - name: Install aqtinstall
        run: |
          python3 -m pip install --upgrade aqtinstall

      - name: List available Qt versions
        run: |
          python3 -m aqt list-qt linux desktop

      - name: List available architectures for Qt 6.5.3
        run: |
          python3 -m aqt list-qt linux desktop --arch 6.5.3

      - name: List available modules for Qt 6.5.3 gcc_64
        run: |
          python3 -m aqt list-qt linux desktop --modules 6.5.3 gcc_64 || echo "No modules available"

      - name: Setup Qt
        run: |
          python3 -m aqt install-qt linux desktop 6.5.3 gcc_64 \
            --outputdir ${{ github.workspace }}/Qt \
            --modules qtcharts qtwebengine qtwebchannel qtpositioning qtlocation qtmultimedia qtnetworkauth

      - name: Configure CMake
        run: |
          cmake -B build -S . -G Ninja \
            -DCMAKE_PREFIX_PATH="${{ github.workspace }}/Qt/6.5.3/gcc_64" \
            -DCMAKE_BUILD_TYPE=Release \
            -DQT_DEBUG_FIND_PACKAGE=ON \
            -DCMAKE_DISABLE_FIND_PACKAGE_WrapVulkanHeaders=TRUE

      - name: Build
        run: cmake --build build --config Release

      - name: Collect dependencies
        run: |
          mkdir -p package
          cp build/BunnyNote package/
          cp -r lib package/
          cp wyw.ico package/
          
          # 创建库目录
          mkdir -p package/lib
          
          # 复制 Qt 依赖
          ldd build/BunnyNote | grep "Qt" | awk '{print $3}' | xargs -I{} cp {} package/lib/
          
          # 复制系统依赖
          ldd build/BunnyNote | grep -v "Qt" | grep -v "linux-vdso.so.1" | awk '{print $3}' | xargs -I{} cp {} package/lib/
          
          # 复制 cmark 库
          find /usr/lib -name "libcmark*.so*" -exec cp {} package/lib/ \;
          
          # 修复动态库路径
          cd package
          for lib in lib/*.so*; do
            if [ -f "$lib" ]; then
              patchelf --set-rpath '$ORIGIN' "$lib"
            fi
          done
          patchelf --set-rpath '$ORIGIN/lib' BunnyNote
          
          # 创建启动脚本
          echo '#!/bin/bash
          SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
          export LD_LIBRARY_PATH="$SCRIPT_DIR/lib:$LD_LIBRARY_PATH"
          "$SCRIPT_DIR/BunnyNote" "$@"' > run.sh
          chmod +x run.sh
          
          # 创建 README
          printf "BunnyNote 便携版\n\n使用说明：\n1. 解压后直接运行 run.sh 启动程序\n2. 如果遇到权限问题，请执行：chmod +x run.sh\n3. 如果遇到库文件问题，请确保 run.sh 有执行权限\n" > README.txt

      - name: Create zip package
        run: |
          cd package
          zip -r ../BunnyNote-portable.zip *

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: BunnyNote-portable
          path: BunnyNote-portable.zip 
